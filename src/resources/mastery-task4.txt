1. What's the problem with the way the PromiseDao currently works?
- The PromiseDao only supports one source for promises: the Delivery Promise Service (DPS). We already need to get promises
from another service, the Order Fulfillment Service (OFS), so this is a good time to make the design more flexible.

2. What ways will the CS representatives use the new multiple-client PromiseDao?
-

3. In a few sentences, how does the PromiseDao work right now?
- Accepts service clients for DPS (Delivery Promise Service) and OMA (Order Manipulation Authority), returns a list of
Promises associated with an orderId, and fetches the delivery date of the shipment containing the order item specified by
the given order item ID, if there is one.

4. Consider a developer unfamiliar with the Missed Promise CLI. Can you add diagrams here that will help them understand
how the PromiseDao works right now?
- Implemented in com.amazon.ata.orderfulfillmentservice

5. Describe in a few sentences how your changes will satisfy the use cases you listed above. How will you enable getting
promises from OFS? How will you allow new promise sources to be added easily in the future?
-

6. Consider a reviewer who misunderstands this design and believes you're going to make the PromiseDao perfect. What are
you not going to do?
-

7 In detail, what calls will the software make, and how will it process the results? You may use a single narrative, but
it should satisfy all the use cases you described above.
-

8. What do you expect the complexity (BigO) of this solution to be, and why? Clearly define the variable(s) you're using
in your BigO notation.
-

9. What could go wrong with your solution? What would surprise a customer service rep who was trying to perform one of the
use cases? If you can't think of anything, remove this section.
-